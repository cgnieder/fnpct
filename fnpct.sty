% --------------------------------------------------------------------------
% the FNPCT package v0.1alpha
% 
%   messing with footnote kerning
% 
% 2012/05/19
% --------------------------------------------------------------------------
% Clemens Niederberger
% Web:    https://bitbucket.org/cgnieder/fnpct/
% E-Mail: contact@mychemistry.eu
% --------------------------------------------------------------------------
% Copyright 2012 Clemens Niederberger
% 
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
% 
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is Clemens Niederberger.
% --------------------------------------------------------------------------
% The fnpct package consists of the files
%  - fnpct.sty,
%  - README
% --------------------------------------------------------------------------
% If you have any ideas, questions, suggestions or bugs to report, please
% feel free to contact me.
% --------------------------------------------------------------------------
% the package is inspired by the following question on TeX.SE:
%   http://tex.stackexchange.com/q/56094/5049
% --------------------------------------------------------------------------
\RequirePackage { xparse , l3keys2e }
\ProvidesExplPackage
  {fnpct}
  {2012/05/19}
  {0.1alpha}
  {footnote kerning}

% --------------------------------------------------------------------------
% SETTING THINGS UP:
% this is plain's \nobreak:
\cs_new:Npn \fnpct_no_break: { \tex_penalty:D \c_ten_thousand }

% rigid lengths:
\dim_new:N \l_fnpct_after_comma_dim
\dim_set:Nn \l_fnpct_after_comma_dim { -.06em }
\dim_new:N \l_fnpct_after_dot_dim
\dim_set:Nn \l_fnpct_after_dot_dim { -.06em }
\dim_new:N \l_fnpct_before_comma_dim
\dim_set:Nn \l_fnpct_before_comma_dim { -.16em }
\dim_new:N \l_fnpct_before_dot_dim
\dim_set:Nn \l_fnpct_before_dot_dim { -.16em }
\dim_new:N \l_fnpct_before_footnote_dim
\dim_set:Nn \l_fnpct_before_footnote_dim { .06em }
\dim_new:N \l_fnpct_normal_mark_indent_dim
\dim_set:Nn \l_fnpct_normal_mark_indent_dim { 1em }
\dim_new:N \l_fnpct_normal_indent_dim
\dim_set:Nn \l_fnpct_normal_indent_dim { 1.5em }
\dim_new:N \l_fnpct_normal_parindent_dim
\dim_set:Nn \l_fnpct_normal_parindent_dim { 1em }

% multiple footnote input and output variables:
\tl_new:N \l_fnpct_multiple_footnotes_delimiter_tl
\tl_set:Nn \l_fnpct_multiple_footnotes_delimiter_tl { ; }
\tl_new:N \l_fnpct_multiple_footnote_separator_tl
% check for KOMA-Script's \multfootsep:
\cs_if_exist:NTF \multfootsep
  { \tl_set:Nn \l_fnpct_multiple_footnote_separator_tl { \multfootsep } }
  { \tl_set:Nn \l_fnpct_multiple_footnote_separator_tl { , } }

% basic booleans for punctuation order switch and multiple footnotes
\bool_new:N \l_fnpct_punct_after_bool
\bool_new:N \l_fnpct_multiple_default_bool
\bool_new:N \l_fnpct_multiple_footnotes_bool
\bool_new:N \l_fnpct_dont_switch_bool
\bool_new:N \l_fnpct_bigfoot_default_top_bool
\bool_new:N \l_fnpct_normal_marks_bool

% options:
\keys_define:nn { fnpct }
  {
    after-comma-space     .dim_set:N  = \l_fnpct_after_comma_dim ,
    after-dot-space       .dim_set:N  = \l_fnpct_after_dot_dim ,
    before-comma-space    .dim_set:N  = \l_fnpct_before_comma_dim ,
    before-dot-space      .dim_set:N  = \l_fnpct_before_dot_dim ,
    after-punct-space     .code:n     =
      \dim_set:Nn \l_fnpct_after_comma_dim { #1 }
      \dim_set:Nn \l_fnpct_after_dot_dim { #1 } ,
    before-punct-space    .code:n     =
      \dim_set:Nn \l_fnpct_before_comma_dim { #1 }
      \dim_set:Nn \l_fnpct_before_dot_dim { #1 } ,
    before-footnote-space .dim_set:N  = \l_fnpct_before_footnote_dim ,
    punct-after           .bool_set:N = \l_fnpct_punct_after_bool ,
    punct-after           .default:n  = true ,
    mult-fn-delim         .tl_set:N   = \l_fnpct_multiple_footnotes_delimiter_tl ,
    mult-fn-sep           .tl_set:N   = \l_fnpct_multiple_footnote_separator_tl ,
    multiple              .bool_set:N = \l_fnpct_multiple_default_bool ,
    multiple              .default:n  = true ,
    bigfoot-default-top   .bool_set:N = \l_fnpct_bigfoot_default_top_bool ,
    bigfoot-default-top   .default:n  = true ,
    normal-marks          .bool_set:N = \l_fnpct_normal_marks_bool ,
    normal-marks          .default:n  = true ,
    normal-mark-indent    .dim_set:N  = \l_fnpct_normal_mark_indent_dim ,
    normal-indent         .dim_set:N  = \l_fnpct_normal_indent_dim ,
    normal-parindent      .dim_set:N  = \l_fnpct_normal_parindent_dim
  }

\ProcessKeysOptions { fnpct }

% --------------------------------------------------------------------------
% MAIN INTERNAL FOOTNOTE FUNCTION:
%   #1: original command
%   #2: optional argument of original command
%   #3: mandatory argument of original command
%   #4: boolean flag for starred version
\cs_new:Npn \fnpct_dot_or_comma:Nnnn #1#2#3#4
  {
    % if a dot follows remove it, insert dot, skip back
    % and then insert footnote
    \fnpct_no_break:
    \IfBooleanT { #4 } { \bool_set_true:N \l_fnpct_dont_switch_bool }
    \peek_meaning_remove:NTF .
      {
        \bool_if:nTF { \l_fnpct_punct_after_bool || \l_fnpct_dont_switch_bool }
          { \fnpct_no_break: \skip_horizontal:N \l_fnpct_before_footnote_dim }
          { . \fnpct_no_break: \skip_horizontal:N \l_fnpct_after_dot_dim }
        \IfNoValueTF { #2 }
          { #1 { #3 } }
          { #1 [ #2 ] { #3 } }
        \bool_if:nT { \l_fnpct_punct_after_bool || \l_fnpct_dont_switch_bool }
          { \skip_horizontal:N \l_fnpct_before_dot_dim \fnpct_no_break: . }
        \bool_set_false:N \l_fnpct_dont_switch_bool
      }
      {
        % else do the same with comma
        \peek_meaning_remove:NTF ,
          {
            \bool_if:nTF { \l_fnpct_punct_after_bool || \l_fnpct_dont_switch_bool }
              { \fnpct_no_break: \skip_horizontal:N \l_fnpct_before_footnote_dim }
              { , \fnpct_no_break: \skip_horizontal:N \l_fnpct_after_comma_dim }
            \IfNoValueTF { #2 }
              { #1 { #3 } }
              { #1 [ #2 ] { #3 } }
            \bool_if:nT { \l_fnpct_punct_after_bool || \l_fnpct_dont_switch_bool }
              { \skip_horizontal:N \l_fnpct_before_comma_dim \fnpct_no_break: , }
            \bool_set_false:N \l_fnpct_dont_switch_bool
          }
          {
            % what about multiple footnotes? (their usage is discouraged with
            % this package, but anyway...)
            % this check should probably be removed
            \peek_meaning:NTF \footnote
              {
                \bool_set_true:N \l_fnpct_multiple_footnotes_bool
                % else insert space and then note
                \fnpct_no_break: \skip_horizontal:N \l_fnpct_before_footnote_dim
                \IfNoValueTF { #2 }
                  { #1 { #3 } }
                  { #1 [ #2 ] { #3 } }
                \fnpct_no_break:
                \textsuperscript { \l_fnpct_multiple_footnote_separator_tl }
%                 \bool_set_false:N \l_fnpct_dont_switch_bool
              }
              {
                % else insert space and then note
                \bool_if:NTF \l_fnpct_multiple_footnotes_bool
                  { \bool_set_false:N \l_fnpct_multiple_footnotes_bool }
                  { \fnpct_no_break: \skip_horizontal:N \l_fnpct_before_footnote_dim }
                \IfNoValueTF { #2 }
                  { #1 { #3 } }
                  { #1 [ #2 ] { #3 } }
                \bool_set_false:N \l_fnpct_dont_switch_bool
              }
            
          }
      }
  }
\cs_generate_variant:Nn \fnpct_dot_or_comma:Nnnn { cnnn }

% --------------------------------------------------------------------------
% MULTIPLE FOOTNOTES
\seq_new:N \l_fnpct_multiple_footnotes_seq
\cs_generate_variant:Nn \seq_set_split:Nnn { NVn }

% #1: original note command
% #2: star
% #3: multiple notes separated by \l_fnpct_multiple_footnotes_delimiter_tl
\cs_new:Npn \fnpct_mult_note:Nnn #1#2#3 
  {
    \IfBooleanT { #2 } { \bool_set_true:N \l_fnpct_dont_switch_bool }
    % split input:
    \seq_set_split:NVn \l_fnpct_multiple_footnotes_seq
      \l_fnpct_multiple_footnotes_delimiter_tl
      { #3 }
    \fnpct_no_break:
    % look for dot and do magic:
    \peek_meaning_remove:NTF .
      {
        \bool_if:nTF { \l_fnpct_punct_after_bool || \l_fnpct_dont_switch_bool }
          { \fnpct_no_break: \skip_horizontal:N \l_fnpct_before_footnote_dim }
          { . \fnpct_no_break: \skip_horizontal:N \l_fnpct_after_dot_dim }
        \fnpct_write_notes:N #1
        \bool_if:nT { \l_fnpct_punct_after_bool || \l_fnpct_dont_switch_bool }
          { \skip_horizontal:N \l_fnpct_before_dot_dim \fnpct_no_break: . }
        \bool_set_false:N \l_fnpct_dont_switch_bool
      }
      {
        % else look for comma and do magic:
        \peek_meaning_remove:NTF ,
          {
            \bool_if:nTF { \l_fnpct_punct_after_bool || \l_fnpct_dont_switch_bool }
              { \fnpct_no_break: \skip_horizontal:N \l_fnpct_before_footnote_dim }
              { , \fnpct_no_break: \skip_horizontal:N \l_fnpct_after_comma_dim }
            \fnpct_write_notes:N #1
            \bool_if:nT { \l_fnpct_punct_after_bool || \l_fnpct_dont_switch_bool }
              { \skip_horizontal:N \l_fnpct_before_comma_dim \fnpct_no_break: , }
            \bool_set_false:N \l_fnpct_dont_switch_bool
          }
          {
            % else insert space and notes:
            \fnpct_no_break: \skip_horizontal:N \l_fnpct_before_footnote_dim
            \fnpct_write_notes:N #1
            \bool_set_false:N \l_fnpct_dont_switch_bool
          }
      }
  }
\cs_generate_variant:Nn \fnpct_mult_note:Nnn { cnn }

% FIXME: change \seq_length into \seq_count when it has been renamed
% #1: original note command
\cs_new:Npn \fnpct_write_notes:N #1
  {
    \int_zero:N \l_tmpa_int
    \seq_map_inline:Nn \l_fnpct_multiple_footnotes_seq
      {
        \fnpct_read_footnote_with_option:w ##1 \q_stop { #1 }
        \int_incr:N \l_tmpa_int
        \int_compare:nNnT
          { \l_tmpa_int }
          <
          { \seq_length:N \l_fnpct_multiple_footnotes_seq }
          { \textsuperscript { \l_fnpct_multiple_footnote_separator_tl } }
      }
  }

% this shouldn't be a document command but is an really easy way to make
% biblatex's \footcite et.al. compatible with the `multiple' option
%   #1: optional argument to original note command
%   #2: mandatory argument to original note command
%   #3: original note command
\NewDocumentCommand \fnpct_read_footnote_with_option:w { ou{\q_stop}m }
  {
    \IfNoValueTF { #1 }
      { #3 { #2 } }
      { #3 [ #1 ] { #2 } }
  }

% --------------------------------------------------------------------------
% MANUAL KERNING:
\cs_new:Npn \kfp
  {
    \bool_if:NTF \l_fnpct_punct_after_bool
      { \skip_horizontal:N \l_fnpct_before_dot_dim }
      { \skip_horizontal:N \l_fnpct_after_dot_dim }
  }
\cs_new:Npn \kfc
  {
    \bool_if:NTF \l_fnpct_punct_after_bool
      { \skip_horizontal:N \l_fnpct_before_comma_dim }
      { \skip_horizontal:N \l_fnpct_after_comma_dim }
  }

% --------------------------------------------------------------------------
% NORMAL MARKS:
\AtBeginDocument
  {
    \bool_if:NT \l_fnpct_normal_marks_bool
      {
        \cs_if_exist:NF \KOMAoption
          { \RequirePackage { scrextend } }
        \deffootnote
          [ \l_fnpct_normal_mark_indent_dim ]
          { \l_fnpct_normal_indent_dim }
          { \l_fnpct_normal_parindent_dim }
          { \thefootnotemark . \enskip }
      }
  }

% --------------------------------------------------------------------------
% DO THE REDEFINING:
\AtBeginDocument
  {
    % save definition of \footnote
    \cs_set_eq:NN \fnpct_orig_footnote:w \footnote
    \cs_set_eq:NN \fnpct_orig_footnotemark:w \footnotemark
    \NewDocumentCommand \multfootnote { s+m }
      { \fnpct_mult_note:Nnn \fnpct_orig_footnote:w { #1 } { #2 } }
    % redefine \footnote
    \bool_if:NTF \l_fnpct_multiple_default_bool
      { \cs_set_eq:NN \footnote \multfootnote }
      {
        \RenewDocumentCommand \footnote { so+m }
          { \fnpct_dot_or_comma:Nnnn \fnpct_orig_footnote:w { #2 } { #3 } { #1 } }
      }
    \RenewDocumentCommand \footnotemark { so }
      { \fnpct_dot_or_comma:Nnnn \fnpct_orig_footnotemark:w { #2 } { } { } }
    %% the `endnotes' package:
    \@ifpackageloaded { endnotes }
      {
        % save definition of \endnote
        \cs_new_eq:NN \fnpct_orig_endnote:w \endnote
        \cs_new_eq:NN \fnpct_orig_endnotemark:w \endnotemark
        \NewDocumentCommand \multendnote { s+m }
          { \fnpct_mult_note:Nnn \fnpct_orig_endnote:w { #1 } { #2 } }
        % redefine \endnote
        \bool_if:NTF \l_fnpct_multiple_default_bool
          { \cs_set_eq:NN \endnote \multendnote }
          {
            \RenewDocumentCommand \endnote { so+m }
              { \fnpct_dot_or_comma:Nnnn \fnpct_orig_endnote:w { #2 } { #3 } { } }
          }
        \RenewDocumentCommand \endnotemark { so }
          { \fnpct_dot_or_comma:Nnnn \fnpct_orig_endnotemark:w { #2 } { } { } }
      }
      { }
    %% the `parnotes' package:
    \@ifpackageloaded { parnotes }
      {
        % save definition of \parnote
        \cs_new_eq:NN \fnpct_orig_parnote:w \parnote
        \NewDocumentCommand \multparnote { s+m }
          { \fnpct_mult_note:Nnn \fnpct_orig_parnote:w { #1 } { #2 } }
        % redefine \parnote
        \bool_if:NTF \l_fnpct_multiple_default_bool
          { \cs_set_eq:NN \parnote \multparnote }
          {
            \RenewDocumentCommand \parnote { so+m }
              { \fnpct_dot_or_comma:Nnnn \fnpct_orig_parnote:w { #2 } { #3 } { } }
          }
      }
      { }
    \@ifpackageloaded { bigfoot }
      {
        \prop_map_inline:Nn \l_fnpct_footnote_class_prop
          {
            % store each footnote command
            \cs_set_eq:cc { fnpct_orig_footnote#2:w } { footnote#2 }
            \cs_set_eq:cc { fnpct_orig_footnotemark#2:w } { footnotemark#2 }
            % then define a suiting \mult... command
            % (this is the 2e way: how do I do that with expl3?)
            \exp_after:wN \NewDocumentCommand \cs:w multfootnote#2 \cs_end: { s+m }
              { \fnpct_mult_note:cnn { fnpct_orig_footnote#2:w } { ##1 } { ##2 } }
            % and redefine each command depending on `multiple'
            \bool_if:NTF \l_fnpct_multiple_default_bool
              { \cs_set_eq:cc { footnote#2 } { multfootnote#2 } }
              {
                \exp_after:wN \RenewDocumentCommand \cs:w footnote#2 \cs_end: { so+m }
                  { \fnpct_dot_or_comma:cnnn { fnpct_orig_footnote#2:w} { ##2 } { ##3 } { ##1 } }
              }
            \exp_after:wN \RenewDocumentCommand \cs:w footnotemark#2 \cs_end: { so }
              { \fnpct_dot_or_comma:cnnn { fnpct_orig_footnotemark#2:w } { ##2 } { } { } }
          }
        % re-set basics:
        \cs_set_eq:NN \footnote \footnotedefault
        \cs_set_eq:NN \footnotemark \footnotemarkdefault
        \cs_set_eq:NN \multfootnote \multfootnotedefault
      }
      { }
  }

% the `bigfoot' package neads special treatment:
\prop_new:N \l_fnpct_footnote_class_prop
\@ifpackageloaded { bigfoot }
  {
    % hook into \DeclareNewFootnote so we can redefine all footnote
    % classes defined be users
    \cs_new_eq:NN \fnpct_new_footnote:w \DeclareNewFootnote
    \RenewDocumentCommand \DeclareNewFootnote { omo }
      {
        \prop_put:Nnn \l_fnpct_footnote_class_prop { #2 } { #2 }
        \IfNoValueTF { #1 }
          {
            \IfNoValueTF { #3 }
              { \fnpct_new_footnote:w { #2 } }
              { \fnpct_new_footnote:w { #2 } [ #3 ] }
          }
          {
            \IfNoValueTF { #3 }
              { \fnpct_new_footnote:w [ #1 ] { #2 } }
              { \fnpct_new_footnote:w [ #1 ]{ #2 } [ #3 ] }
          }
      }
    \bool_if:NT \l_fnpct_bigfoot_default_top_bool
      { \DeclareNewFootnote { default } }
  }
  { }

% --------------------------------------------------------------------------
% SETUP COMMAND:
\NewDocumentCommand \setfnpct { m }
  { \keys_set:nn { fnpct } { #1 } }

\tex_endinput:D

% --------------------------------------------------------------------------
% HISTORY:
2012/05/18 v0.1alpha - various changes still possible without announcement
                       until declared `v0.1'

% --------------------------------------------------------------------------
% TODO:
- option: bigfoot-perpage?